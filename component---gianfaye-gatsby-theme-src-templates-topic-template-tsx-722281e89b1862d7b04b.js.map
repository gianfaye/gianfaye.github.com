{"version":3,"sources":["webpack:///../@gianfaye/gatsby-theme/src/components/TopicsList/Topics.List.tsx","webpack:///../@gianfaye/gatsby-theme/src/sections/topics/Topics.Hero.tsx","webpack:///../@gianfaye/gatsby-theme/src/templates/topic.template.tsx","webpack:///../@gianfaye/gatsby-theme/src/sections/topic/Topic.Articles.tsx"],"names":["TopicsList","topics","selectedTopic","useState","isOpen","setIsOpen","fill","useColorMode","hasSelectedTopic","Object","keys","length","topicsBlank","id","name","avatar","bio","slug","topicsPage","featured","color","topicsWithDefaultAll","TopicsContainer","onClick","CoTopicsList","NameContainer","IconContainer","ToggleOpen","onOutsideClick","CoTopicsListOpen","IconOpenContainer","ToggleClose","map","topic","index","CoTopicsListItemOpen","key","TopicLink","as","Link","to","TopicNameOpen","p","theme","colors","grey","card","mediaqueries","phablet","accent","fonts","sansSerif","primary","desktop","background","colorModeTransition","secondary","HeadingContainer","TopicsHero","useContext","GridLayoutContext","gridLayout","hasSetGridLayout","setGridLayout","useStaticQuery","site","edges","node","siteMetadata","hero","Section","narrow","HeroHeading","HeroHeadingLabel","tablet","hover","active","ArticlesPage","location","pageContext","additionalContext","articles","group","pathname","title","description","TopicPaginator","gradient","TopicArticles","TopicArticlesContainer","alwaysShowAllDetails","desktop_medium"],"mappings":"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","file":"component---gianfaye-gatsby-theme-src-templates-topic-template-tsx-722281e89b1862d7b04b.js","sourcesContent":["import React, { useState } from 'react';\nimport { Link } from 'gatsby';\nimport styled from '@emotion/styled';\nimport OutsideClickHandler from \"react-outside-click-handler\";\nimport { useColorMode } from \"theme-ui\";\n\nimport Image from '@components/Image';\nimport { ITopic } from '@types';\nimport Icons from \"@icons\";\nimport mediaqueries from \"@styles/media\";\n\nconst TopicsList: React.FC<ITopic> = ({ topics, selectedTopic }) => {\n  const [isOpen, setIsOpen] = useState(false);\n  const [colorMode] = useColorMode();\n\n  const fill = colorMode === \"dark\" ? \"#fff\" : \"#000\";\n\n  const hasSelectedTopic = Object.keys(selectedTopic).length;\n\n  const topicsBlank = {\n    id: 0,\n    name: 'all topics I write about',\n    avatar: '',\n    bio: '',\n    slug: '/blog',\n    topicsPage: true,\n    featured: false,\n    color: ''\n  };\n\n  const topicsWithDefaultAll = [ topicsBlank, ...topics ];\n\n  return (\n    <TopicsContainer onClick={() => setIsOpen(!isOpen)} isOpen={isOpen}>\n      {/*{ selectedTopic.avatar &&*/}\n      {/*  <TopicBackground src={selectedTopic.avatar.large} />*/}\n      {/*}*/}\n      <CoTopicsList /*style={listWidth}*/>\n        {/*{topics.map((topic, index) => (*/}\n        {/*  <CoTopicAvatar style={{ left: `${index * 15}px` }} key={topic.name}>*/}\n        {/*    <RoundedImage src={topic.avatar.small} />*/}\n        {/*  </CoTopicAvatar>*/}\n        {/*))}*/}\n      </CoTopicsList>\n      <NameContainer>{ hasSelectedTopic ? selectedTopic.name : topicsBlank.name}</NameContainer>\n      <IconContainer>\n        <Icons.ToggleOpen fill={fill} />\n      </IconContainer>\n\n\n      {isOpen && (\n        <OutsideClickHandler onOutsideClick={() => setIsOpen(!isOpen)}>\n          <CoTopicsListOpen>\n            <IconOpenContainer>\n              <Icons.ToggleClose fill={fill} />\n            </IconOpenContainer>\n            {topicsWithDefaultAll.map((topic, index) => (\n              <CoTopicsListItemOpen key={topic.name}>\n                <TopicLink\n                  as={topic.topicsPage ? Link : \"div\"}\n                  to={topic.slug}\n                >\n                  {/*<CoTopicAvatarOpen>*/}\n                  {/*  <RoundedImage src={topic.avatar.small} />*/}\n                  {/*</CoTopicAvatarOpen>*/}\n                  <TopicNameOpen>{topic.name}</TopicNameOpen>\n                </TopicLink>\n              </CoTopicsListItemOpen>\n            ))}\n          </CoTopicsListOpen>\n        </OutsideClickHandler>\n      )}\n\n      {/*{topics.map((topic, index) => {*/}\n      {/*  //return console.log('topic', topic);*/}\n      {/*  console.log('topic.color', topic.color);*/}\n      {/*  return (*/}\n      {/*    <TopicContainer key={index} color={topic.color}>*/}\n      {/*      <TopicsAvatar*/}\n      {/*        as={topic.topicsPage ? Link : 'div'}*/}\n      {/*        to={topic.slug}*/}\n      {/*      >*/}\n      {/*        <TopicsAvatarInner>*/}\n      {/*          <RoundedImage*/}\n      {/*            isEven={index % 2 == 0}*/}\n      {/*            src={topic.avatar.large}*/}\n      {/*          />*/}\n      {/*        </TopicsAvatarInner>*/}\n      {/*      </TopicsAvatar>*/}\n      {/*      <div>*/}\n      {/*        { topic.id == selectedTopic.id ? 'SELECTED TOPIC' : 'not selected'}*/}\n      {/*      </div>*/}\n      {/*      <TopicsText dangerouslySetInnerHTML={{ __html: topic.name }} />*/}\n      {/*    </TopicContainer>*/}\n      {/*  );*/}\n      {/*})}*/}\n    </TopicsContainer>\n  );\n};\n\nexport default TopicsList;\n\n// const TopicsContainer = styled.div`\n//   width: 100%;\n//   display: grid;\n//   grid-gap: 16px;\n//   //grid-template-columns: repeat(auto-fill,minmax(150px,215px));\n//   //grid-template-columns: repeat(auto-fill,minmax(200px,365px));\n//   grid-template-columns: repeat(auto-fill,minmax(250px,265px));\n//   justify-content: center;\n// `;\n\nconst TopicsContainer = styled.div<{ isOpen: boolean }>`\n  position: relative;\n  //display: flex;\n  display: inline-block;\n  align-items: center;\n  //font-size: 18px;\n  color: ${p => p.theme.colors.grey};\n  letter-spacing: 1px;\n  cursor: pointer;\n  vertical-align: middle;\n\n  &::before {\n    content: \"\";\n    position: absolute;\n    left: -20px;\n    right: -20px;\n    top: -16px;\n    bottom: -16px;\n    background: ${p => p.theme.colors.card};\n    box-shadow: ${p =>\n  p.isOpen ? \"none\" : \" 0px 0px 15px rgba(0, 0, 0, 0.1)\"};\n    border-radius: 5px;\n    z-index: 0;\n    transition: opacity 0.3s;\n    cursor: pointer;\n    opacity: 0;\n  }\n\n  &:hover::before {\n    opacity: 1;\n  }\n\n\n  ${mediaqueries.phablet`\n    //font-size: 14px;\n    align-items: center;\n\n    &::before {\n      box-shadow: none;\n      bottom: -30px;\n      background: transparent;\n    }\n\n    strong {\n      display: block;\n      font-weight: semi-bold;\n      margin-top: 6px;\n    }\n  `}\n`;\n\nconst TopicContainer = styled.div<{ color: string }>`\n  position: relative;\n  display: flex;\n  height: 304px;\n  cursor: pointer;\n  flex-direction: column;\n  justify-content: flex-end;\n  align-items: center;\n  border-radius: 7px;\n  padding: 24px 0;\n  background-color: #${p => p.color};\n  background-repeat: no-repeat;\n  background-size: 100%;\n  border: 1px solid rgba(29,29,29,.1);\n  overflow: hidden;\n`;\n\nconst TopicsAvatar = styled.div`\n  display: block;\n  position: relative;\n  height: 100%;\n  width: 100%;\n\n  &[data-a11y='true']:focus::after {\n    content: '';\n    position: absolute;\n    left: -5px;\n    top: -5px;\n    width: 50px;\n    height: 50px;\n    border: 2px solid ${p => p.theme.colors.accent};\n  }\n`;\n\nconst RoundedImage = styled(Image)<{ isEven: boolean }>`\n  height: 180px;\n\n  img {\n    object-position: ${p => p.isEven ? `left` : `right`} !important;\n    //object-position: right !important;\n  }\n`;\n\nconst TopicBackground = styled(Image)<{ isEven: boolean }>`\n  width: 300px;\n  position: absolute !important;\n  left: -20vw;\n  top: -30px;\n  z-index: 0;\n  display: block;\n  filter: grayscale(100%);\n}\n`;\n\nconst TopicsAvatarInner = styled.div`\n  height: 100%;\n  overflow: hidden;\n`;\n\nconst TopicsText = styled.p`\n  max-width: 430px;\n  font-size: 16px;\n  margin-bottom: 20px;\n  text-transform: uppercase;\n  text-align: left;\n  padding: 0 60px 0 30px;\n  font-weight: bold;\n  display: block;\n  //opacity: 0.5;\n  line-height: 1.45;\n  font-family: ${p => p.theme.fonts.sansSerif};\n  //color: ${p => p.theme.colors.grey};\n\n  a {\n    //color: ${p => p.theme.colors.grey};\n    text-decoration: underline;\n  }\n`;\n\n\nconst NameContainer = styled.strong`\n  position: relative;\n  //max-width: 260px;\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  cursor: pointer;\n  //font-family: ${p => p.theme.fonts.sansSerif};\n  color: ${p => p.theme.colors.primary};\n  border-bottom: 5px solid;\n  //text-transform: uppercase;\n  //font-size: 14px;\n  font-weight: 400;\n  display: inline-block;\n  margin-top: 4px;\n  vertical-align: middle;\n\n  // ${mediaqueries.desktop`\n  //   max-width: 170px;\n  // `}\n  //\n  // ${mediaqueries.phablet`\n  //   max-width: 200px;\n  // `}\n`;\n\nconst IconContainer = styled.div`\n  position: relative;\n  cursor: pointer;\n  margin-left: 10px;\n  display: inline-block;\n\n  svg{\n    width: 30px;\n    height: 30px;\n  }\n\n  ${mediaqueries.phablet`\n    position: absolute;\n    right: -30px;\n    bottom: 0px;\n    top: 3px;\n    height: 100%;\n  `}\n`;\n\nconst IconOpenContainer = styled.div`\n  position: absolute;\n  cursor: pointer;\n  top: -10px;\n  right: 21px;\n\n  ${mediaqueries.desktop`\n    top: 10px;\n  `}\n\n  ${mediaqueries.phablet`\n    top: 67px;\n    right: 37px;\n  `}\n\n  svg {\n    width: 30px;\n    height: 30px;\n  }\n`;\n\n\nconst CoTopicsList = styled.div`\n  position: relative;\n  //height: 25px;\n  //margin-right: 15px;\n  width: auto;\n  min-width: 300px;\n\n  ${mediaqueries.phablet`\n    display: none;\n  `}\n`;\n\n\nconst CoTopicsListOpen = styled.ul`\n  position: absolute;\n  z-index: 2;\n  left: -21px;\n  right: -21px;\n  top: 105px;\n  padding: 50px;\n  background: ${p => p.theme.colors.card};\n  box-shadow: 0px 0px 15px rgba(0, 0, 0, 0.1);\n  border-radius: 5px;\n  cursor: pointer;\n  list-style: none;\n  transform: translateY(-2px);\n  max-height: 500px;\n  overflow-y: scroll;\n  display: grid;\n  width: 100%;\n  grid-gap: 16px;\n  grid-template-columns: repeat(auto-fill,minmax(150px,300px));\n\n  ${mediaqueries.desktop`\n    display: block;\n    left: 0;\n  `}\n\n  ${mediaqueries.phablet`\n    width: 280px;\n  `}\n`;\n\nconst CoTopicsListItemOpen = styled.li`\n  a {\n    width: 100%;\n  }\n\n  &:not(:last-child) {\n    margin-bottom: 10px;\n  }\n`;\n\nconst CoTopicAvatarOpen = styled.div`\n  height: 25px;\n  width: 25px;\n  border-radius: 50%;\n  margin-right: 15px;\n  background: ${p => p.theme.colors.grey};\n  overflow: hidden;\n  pointer-events: none;\n\n  .gatsby-image-wrapper > div {\n    padding-bottom: 100% !important;\n    overflow: hidden;\n  }\n`;\n\nconst CoTopicAvatar = styled.div`\n  position: absolute;\n  height: 25px;\n  width: 25px;\n  border-radius: 50%;\n  z-index: 1;\n  background: ${p => p.theme.colors.grey};\n  box-shadow: 0 0 0 2px ${p => p.theme.colors.background};\n  transition: box-shadow 0.25s ease;\n  overflow: hidden;\n  pointer-events: none;\n\n  .gatsby-image-wrapper > div {\n    padding-bottom: 100% !important;\n    overflow: hidden;\n  }\n\n  ${mediaqueries.phablet`\n    display: none;\n  `}\n`;\n\nconst TopicLink = styled.div`\n  display: flex;\n  align-items: center;\n  color: inherit;\n  margin-left: 10px;\n  letter-spacing: 1px;\n\n  strong {\n    transition: ${p => p.theme.colorModeTransition};\n  }\n\n  &:hover strong {\n    color: ${p => p.theme.colors.primary};\n  }\n`;\n\nconst TopicNameOpen = styled.strong`\n  position: relative;\n  cursor: pointer;\n  color: ${p => p.theme.colors.secondary};\n  font-weight: 400;\n  font-size: 16px;\n  font-family: ${p => p.theme.fonts.sansSerif};\n  color: ${p => p.theme.colors.primary};\n  text-transform: uppercase;\n  letter-spacing: 1px;\n  padding-bottom: 3px;\n\n  &:hover{\n    padding-bottom: 1px;\n    border-bottom: 1px solid ${p => p.theme.colors.primary};\n  }\n`;\n\n","import React, { useContext } from 'react';\nimport { graphql, useStaticQuery } from 'gatsby';\nimport styled from '@emotion/styled';\n\nimport Section from '@components/Section';\nimport Bio from '@components/Bio';\nimport Topics from '@components/Topics';\nimport TopicsList from '@components/TopicsList';\nimport Icons from '@icons';\nimport mediaqueries from '@styles/media';\nimport { ITopic } from '@types';\n\nimport { GridLayoutContext } from '../articles/Articles.List.Context';\n\nconst topicQuery = graphql`\n  {\n    site: allSite {\n      edges {\n        node {\n          siteMetadata {\n            hero {\n              heading\n              maxWidth\n            }\n          }\n        }\n      }\n    }\n  }\n`;\n\nconst TopicsHero: React.FC<ITopic> = ({ topics, topic }) => {\n  const { gridLayout = 'tiles', hasSetGridLayout, setGridLayout } = useContext(\n    GridLayoutContext,\n  );\n\n\n  const results = useStaticQuery(topicQuery);\n  const hero = results.site.edges[0].node.siteMetadata.hero;\n  const tilesIsActive = hasSetGridLayout && gridLayout === 'tiles';\n  //const featuredTopic = topics.find(topic => topic.featured);\n\n  // if (!featuredTopic) {\n  //   throw new Error(`\n  //     No featured Topic found.\n  //     Please ensure you have at least featured Topic.\n  // `);\n  // }\n\n  return (\n    <Section narrow id=\"Articles__Hero\">\n      <HeadingContainer>\n        {/*<HeroHeading dangerouslySetInnerHTML={{ __html: 'Explore topics I post about' }} />*/}\n        <HeroHeading>\n          <HeroHeadingLabel>Explore</HeroHeadingLabel>\n          <TopicsList topics={topics} selectedTopic={topic} />\n        </HeroHeading>\n      </HeadingContainer>\n      {/*<SubheadingContainer>*/}\n        {/*<Topics topics={topics} />*/}\n        {/*<GridControlsContainer>*/}\n        {/*  <GridButton*/}\n        {/*    onClick={() => setGridLayout('tiles')}*/}\n        {/*    active={tilesIsActive}*/}\n        {/*    data-a11y=\"false\"*/}\n        {/*    title=\"Show articles in Tile grid\"*/}\n        {/*    aria-label=\"Show articles in Tile grid\"*/}\n        {/*  >*/}\n        {/*    <Icons.Tiles />*/}\n        {/*  </GridButton>*/}\n        {/*  <GridButton*/}\n        {/*    onClick={() => setGridLayout('rows')}*/}\n        {/*    active={!tilesIsActive}*/}\n        {/*    data-a11y=\"false\"*/}\n        {/*    title=\"Show articles in Row grid\"*/}\n        {/*    aria-label=\"Show articles in Row grid\"*/}\n        {/*  >*/}\n        {/*    <Icons.Rows />*/}\n        {/*  </GridButton>*/}\n        {/*</GridControlsContainer>*/}\n      {/*</SubheadingContainer>*/}\n    </Section>\n  );\n};\n\nexport default TopicsHero;\n\nconst SubheadingContainer = styled.div`\n  // display: flex;\n  // align-items: center;\n  // justify-content: space-between;\n  // margin-bottom: 100px;\n  padding: 20px 0;\n\n  ${mediaqueries.desktop`\n    margin-bottom: 80px;\n  `};\n\n  ${mediaqueries.tablet`\n    margin-bottom: 60px;\n  `};\n\n  ${mediaqueries.phablet`\n    display: none;\n  `};\n`;\n\nconst GridControlsContainer = styled.div`\n  display: flex;\n  align-items: center;\n  width: 110px;\n  margin: 0 auto;\n\n  ${mediaqueries.tablet`\n    display: none;\n  `};\n`;\n\nconst HeadingContainer = styled.div`\n  margin: 80px 0 90px 0;\n  display: inline-block;\n\n  ${mediaqueries.desktop`\n    width: 80%;\n  `}\n\n  ${mediaqueries.tablet`\n    width: 100%;\n  `}\n\n  ${mediaqueries.phablet`\n    margin: 60px 0 80px 0;\n  `}\n`;\n\nconst HeroHeading = styled.h1`\n  font-style: normal;\n  font-weight: 400;\n  font-size: 80px;\n  line-height: 1.15;\n  color: ${p => p.theme.colors.primary};\n  vertical-align: middle;\n  display: table-cell;\n\n  a {\n    color: ${p => p.theme.colors.accent};\n  }\n\n  ${mediaqueries.desktop`\n    font-size: 38px\n  `}\n\n  ${mediaqueries.phablet`\n    font-size: 24px;\n  `}\n`;\n\nconst HeroHeadingLabel = styled.span`\n   vertical-align: middle;\n   margin-right: 15px;\n\n  ${mediaqueries.phablet`\n    margin-right: 8px;\n    display: block;\n  `}\n`;\n\nconst GridButton = styled.button<{ active: boolean }>`\n  position: relative;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  height: 36px;\n  width: 36px;\n  border-radius: 50%;\n  background: transparent;\n  transition: background 0.25s;\n\n  &:not(:last-child) {\n    margin-right: 30px;\n  }\n\n  &:hover {\n    background: ${p => p.theme.colors.hover};\n  }\n\n  &[data-a11y='true']:focus::after {\n    content: '';\n    position: absolute;\n    left: -10%;\n    top: -10%;\n    width: 120%;\n    height: 120%;\n    border: 2px solid ${p => p.theme.colors.accent};\n    background: rgba(255, 255, 255, 0.01);\n    border-radius: 50%;\n  }\n\n  svg {\n    opacity: ${p => (p.active ? 1 : 0.25)};\n    transition: opacity 0.2s;\n\n    path {\n      fill: ${p => p.theme.colors.primary};\n    }\n  }\n`;\n","import React from \"react\";\nimport styled from \"@emotion/styled\";\n\nimport Section from \"@components/Section\";\nimport SEO from \"@components/SEO\";\nimport Layout from \"@components/Layout\";\nimport Paginator from \"@components/Navigation/Navigation.Paginator\";\n\nimport TopicHero from \"../sections/topic/Topic.Hero\";\nimport TopicArticles from \"../sections/topic/Topic.Articles\";\nimport TopicsHero from \"../sections/topics/Topics.Hero\";\n\nimport { Template } from \"@types\";\n\nconst ArticlesPage: Template = ({ location, pageContext }) => {\n  const topic = pageContext.additionalContext.topic;\n  const topics = pageContext.additionalContext.topics;\n  const articles = pageContext.group;\n\n  return (\n    <Layout>\n      <SEO\n        pathname={location.pathname}\n        title={topic.name}\n        description={topic.bio}\n      />\n      <TopicsHero topics={topics} topic={topic} />\n      <Section narrow>\n        {/*<TopicHero topic={topic} />*/}\n        <TopicArticles articles={articles} />\n        <TopicPaginator>\n          <Paginator {...pageContext} />\n        </TopicPaginator>\n      </Section>\n      {/*<TopicsGradient />*/}\n    </Layout>\n  );\n};\n\nexport default ArticlesPage;\n\nconst TopicsGradient = styled.div`\n  position: absolute;\n  bottom: 0;\n  left: 0;\n  width: 100%;\n  height: 590px;\n  z-index: 0;\n  pointer-events: none;\n  background: ${p => p.theme.colors.gradient};\n  transition: ${p => p.theme.colorModeTransition};\n`;\n\nconst TopicPaginator = styled.div`\n  text-align: center;\n`;\n","import React from \"react\";\nimport styled from \"@emotion/styled\";\n\nimport mediaqueries from \"@styles/media\";\nimport { IArticle } from \"@types\";\n\nimport ArticlesList from \"../articles/Articles.List\";\n\ninterface TopicArticlesProps {\n  articles: IArticle[];\n}\n\nconst TopicArticles: React.FC<TopicArticlesProps> = ({ articles }) => {\n  return (\n    <TopicArticlesContainer>\n      <ArticlesList articles={articles} alwaysShowAllDetails />\n    </TopicArticlesContainer>\n  );\n};\n\nexport default TopicArticles;\n\nconst TopicArticlesContainer = styled.div`\n  // background: linear-gradient(\n  //   180deg,\n  //   ${p => p.theme.colors.card} 0%,\n  //   rgba(249, 250, 252, 0) 91.01%\n  // );\n  // border-radius: 8px;\n  // padding: 88px 98px;\n  position: relative;\n  z-index: 1;\n\n  ${mediaqueries.desktop_medium`\n    padding: 80px;\n  `}\n\n  ${mediaqueries.desktop`\n    padding: 0;\n    background: transparent;\n  `}\n`;\n"],"sourceRoot":""}